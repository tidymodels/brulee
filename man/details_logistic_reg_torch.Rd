% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logistic_reg_torch.R
\name{details_logistic_reg_torch}
\alias{details_logistic_reg_torch}
\title{Logistic regression via torch}
\description{
\code{\link[=lantern_logistic_reg]{lantern_logistic_reg()}} uses regularized estimation to fit models
with categorical outcomes with two levels.
}
\details{
For this engine, there is a single mode: classification
\subsection{Tuning Parameters}{

This model has 1 tuning parameters listed as a main argument:
\itemize{
\item \code{penalty}: Amount of Regularization (type: double, default: 0.001)
}

For \code{penalty}, the amount of regularization is \emph{only} L2 penalty (i.e.,
ridge or weight decay).

There are other parameters that can be set or tuned via
\code{\link[parsnip:set_engine]{parsnip::set_engine()}}:
\itemize{
\item \code{epochs}: The (maximum) number of training iterations (default: 20L)
\item \code{learn_rate}: The rate that the optimization procedure chases the
direction of steepest decent (default: 1.0, \code{optimizer = 'SGD'}
only)
\item \code{momentum}: The amount to adjust the gradient direction/length with
the value from a previous iteration. (default: 0.0,
\code{optimizer = 'SGD'} only)
\item \code{batch_size}: (default: )
\item \code{stop_iter}: The number of iterations with no improvement before
stopping. (default: 5L)
\item \code{class_weights}: Numeric class weights. The value for this argument
could be:
\itemize{
\item A named numeric vector (in any order) where the names are the
outcome factor levels.
\item An unnamed numeric vector assumed to be in the same order as the
outcome factor levels.
\item A single numeric value for the least frequent class in the
training data and all other classes receive a weight of one.
}
}

Other relevant arguments that are not tuning parameters:
\itemize{
\item \code{validation}: The proportion of the data randomly assigned to a
validation set. (default: 0.1)
\item \code{optimizer}: The method used in the optimization procedure. Possible
choices are \code{'LBFGS'} and \code{'SGD'}. (default: \code{'LBFGS'})
}
}

\subsection{Translation from parsnip to the original package}{\if{html}{\out{<div class="sourceCode r">}}\preformatted{logistic_reg(penalty = double(1)) \%>\% 
  set_engine("torch") \%>\% 
  translate()
}\if{html}{\out{</div>}}\preformatted{## Logistic Regression Model Specification (classification)
## 
## Main Arguments:
##   penalty = double(1)
## 
## Computational engine: torch 
## 
## Model fit template:
## lantern::lantern_logistic_reg(x = missing_arg(), y = missing_arg(), 
##     decay = double(1))
}
}

\subsection{Preprocessing requirements}{

Factor/categorical predictors need to be converted to numeric values
(e.g., dummy or indicator variables) for this engine. When using the
formula method via \code{fit.model_spec()}, parsnip will convert factor
columns to indicators.

Predictors should have the same scale. One way to achieve this is to
center and scale each so that each predictor has mean zero and a
variance of one.
}

\subsection{References}{
\itemize{
\item Hoerl, A., & Kennard, R. (2000). \emph{Ridge Regression: Biased
Estimation for Nonorthogonal Problems}. Technometrics, 42(1), 80-86.
}
}
}
\keyword{internal}
